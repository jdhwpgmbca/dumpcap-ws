
# Before making changes to this file, which are checked using git, please consider using
# One of the other configuration mechanisms such as passing -Dvar=value, environment variables,
# or the .env file. See https://quarkus.io/guides/config-reference for more information.
# 
# As mentioned in a few places below, the hot-replace feature of quarkus:dev mode doesn't
# subsitute the ${project.basedir} variable like .\mvnw clean comple does, which causes
# the server to crash. Using one of the alternate config mechanisms avoids this.
# 
# I suggest using the .env file to store development workstation customizations for the properites
# below. The file is excluded from git checkins, so it's a good place for workstation specific
# configuration. Just remember that you need to upper-case the variable names, and replace the
# periods with "_" characters. The same rules apply to environment variables.

start-capture-script=${start-capture-script}

# OIDC Auth configuration

# If you're running this on a development workstation running Docker (Windows or Linux), then a test keycloak server
# will be run inside a docker container automatically - as long as you don't set the quarkus.oidc.auth-server-url
# property below. The test keycloak server will also be automatically provisioned with a realm called quarkus,
# and with users alice and bob (each using their own userid's as passwords). There's also an admin user with an
# admin password that you can use to login to the server. The TCP port number should be printed in the console
# output, or you can use this from a Windows PowerShell prompt to get the port:
# 
# $port=((docker port (docker ps -f "expose=8443/tcp" -q) 8080/tcp | Select-Object -First 1).split(":") | Select-Object -Last 1)

# In a production environment, you'll need to setup a permanent Keycloak or other OpenID-connect authorization server,
# with strong credentials. You should also set the quarkus.oidc.auth-server-url property to point to the OIDC servers realm.
# Doing this will disable the quarkus.keycloak.devservices stuff, and the keycloak server will no longer be started in
# docker.

quarkus.oidc.auth-server-url=${auth.server.url}/auth/realms/quarkus
quarkus.oidc.client-id=backend-service
quarkus.oidc.credentials.secret=secret
quarkus.oidc.tls.verification=required

quarkus.keycloak.devservices.enabled=true
quarkus.keycloak.devservices.realm-name=quarkus
quarkus.keycloak.devservices.grant.type=code

# Datasource configuration: You'll also want to change the username & password here for production, and you may also want to
#                           configure a production database like MySQL or Postgres.
# 
# You may also want to change the ${project.basedir} to a hard-coded path to avoid server crashes in quarkus:dev mode as explained
# above with the startCaptureScript. But remember to put it back in before you check in the code!

quarkus.datasource.db-kind=h2
quarkus.datasource.username=dumcap-user
quarkus.datasource.password=changeme
quarkus.datasource.jdbc.url=${datasource.jdbc.url}
%test.quarkus.datasource.jdbc.url=${datasource.jdbc.test.url}

# The drop-and-create is useful for testing because it starts off with a new database every time the server is restarted.
# However, in production you'll definitely want to change this to something else. See the Hibernate documentation for details.

quarkus.hibernate-orm.database.generation=update
%dev.quarkus.hibernate-orm.database.generation=update
%test.quarkus.hibernate-orm.database.generation=drop-and-create

# Container properties
# 
# Now using my own Dockerfile.ubuntu Dockerfile and build scripts: dockerBuild.sh, dockerRun.sh, dockerBuild.ps1, dockerRun.ps1

# quarkus.container-image.group=${docker.group}
# quarkus.container-image.registry=${docker.registry}
# quarkus.container-image.name=dumpcap-ws
# quarkus.container-image.tag=${git.hash:latest}

# Kubernetes settings

# quarkus.kubernetes.name=dumpcap-ws
# quarkus.kubernetes.image-pull-secrets=
# quarkus.kubernetes.expose=false
# quarkus.kubernetes.replicas=3
# quarkus.kubernetes.ports.https.container-port=8443
# quarkus.kubernetes.env.configmaps=
# quarkus.kubernetes.secret-volumes.ssl.secret-name=
# quarkus.kubernetes.secret-volumes.ssl.default-mode=0444
# quarkus.kubernetes.mounts.ssl.path=/deployments/ssl

